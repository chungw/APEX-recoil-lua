function OnEvent(event, arg)
    local pattern = {{0, 0, 0.0144}, {-1, 2, 0.0144}, {0, 2, 0.0144}, {1, 0, 0.0144}, {-1, 1, 0.0144}, {1, 3, 0.0144}, {1, 0, 0.0144}, {-1, 2, 0.0144}, {0, -1, 0.0144}, {2, 3, 0.0144}, {1, 0, 0.0144}, {-1, 1, 0.0144}, {-1, 2, 0.0144}, {1, 2, 0.0144}, {-1, 1, 0.0144}, {-1, 3, 0.0144}, {0, 2, 0.0144}, {1, 1, 0.0144}, {-1, 1, 0.0144}, {-3, 6, 0.0144}, {0, 0, 0.0144}, {-1, 2, 0.0144}, {-2, 2, 0.0144}, {-1, 2, 0.0144}, {-1, 1, 0.0144}, {-2, 2, 0.0144}, {0, 1, 0.0144}, {-1, 1, 0.0144}, {0, 0, 0.0144}, {-1, 3, 0.0144}, {1, 0, 0.0144}, {-1, 2, 0.0144}, {2, 2, 0.0144}, {2, 1, 0.0144}, {0, 2, 0.0144}, {2, 2, 0.0144}, {2, 2, 0.0144}, {0, 1, 0.0144}, {0, 1, 0.0144}, {1, 3, 0.0144}, {0, 0, 0.0144}, {0, 2, 0.0144}, {1, 2, 0.0144}, {2, 2, 0.0144}, {-2, 2, 0.0144}, {0, 0, 0.0144}, {0, -2, 0.0144}, {-1, 2, 0.0144}, {1, 0, 0.0144}, {-5, -2, 0.0144}, {0, 0, 0.0144}, {0, 0, 0.0144}, {-2, 2, 0.0144}, {0, 0, 0.0144}, {-1, 0, 0.0144}, {-2, 2, 0.0144}, {0, -1, 0.0144}, {-1, 1, 0.0144}, {0, 1, 0.0144}, {4, 1, 0.0144}, {0, -1, 0.0144}, {0, 2, 0.0144}, {1, 0, 0.0144}, {2, -2, 0.0144}, {0, 1, 0.0144}, {2, 2, 0.0144}, {2, 0, 0.0144}, {0, 1, 0.0144}, {2, 2, 0.0144}, {2, -2, 0.0144}, {0, 1, 0.0144}, {1, 3, 0.0144}, {2, 0, 0.0144}, {0, 1, 0.0144}, {-1, 1, 0.0144}, {0, 0, 0.0144}, {0, 0, 0.0144}, {-1, 1, 0.0144}, {-2, -1, 0.0144}, {-2, 0, 0.0144}, {0, 0, 0.0144}, {0, 0, 0.0144}, {-3, 1, 0.0144}, {-2, -2, 0.0144}, {0, 2, 0.0144}, {-1, 2, 0.0144}, {1, -3, 0.0144}, {-1, 1, 0.0144}, {2, 2, 0.0144}, {2, -1, 0.0144}, {1, 2, 0.0144}}


    local sens = 1.8
    local zoom_sens = 1/1.8
    local modifier  = 4/sens*zoom_sens



    if (event == "PROFILE_ACTIVATED") then
        EnablePrimaryMouseButtonEvents(true)
    end
 if IsKeyLockOn("capslock")then
    if (event == "MOUSE_BUTTON_PRESSED" and arg == 1)then
        if IsMouseButtonPressed(3)then
          for i = 1, #pattern do
            if not IsMouseButtonPressed(1) then
              break --exit
            end
            MoveMouseRelative(math.ceil(pattern[i][1]*modifier),math.ceil(pattern[i][2]*modifier))
            Sleep(math.floor(pattern[i][3]*1000))
        end
      end
    end
  end
end